# Define custom function directory
ARG FUNCTION_DIR="/function"

FROM python:3.9-buster as build-image

# Include global arg in this stage of the build
ARG FUNCTION_DIR

# Install aws-lambda-cpp build dependencies
RUN apt-get update && \
  apt-get install -y \
  g++ \
  make \
  cmake \
  unzip \
  git \
  libcurl4-openssl-dev

# Copy function code
RUN mkdir -p ${FUNCTION_DIR}

# Update pip
RUN pip install -U pip wheel six setuptools

# Install the function's dependencies
RUN pip install \
    --target ${FUNCTION_DIR} \
        awslambdaric \
        boto3 \
        redis \
        httplib2 \
        requests \
        numpy \
        scipy \
        pandas \
        pika \
        kafka-python \
        cloudpickle \
        ps-mem \
        tblib \
        delegator.py \
        invoke

FROM python:3.9-buster

# Include global arg in this stage of the build
ARG FUNCTION_DIR
# Set working directory to function root directory
WORKDIR ${FUNCTION_DIR}

# Copy in the built dependencies
COPY --from=build-image ${FUNCTION_DIR} ${FUNCTION_DIR}

# Add Lithops
COPY lithops_lambda.zip ${FUNCTION_DIR}
RUN unzip lithops_lambda.zip \
    && rm lithops_lambda.zip \
    && mkdir handler \
    && touch handler/__init__.py \
    && mv entry_point.py handler/

# Put your dependencies/tools here, using RUN pip install... or RUN apt install...

ENV HOME="/tmp"
RUN mkdir "/tmp/.config"
RUN chmod -R a+rwx "/tmp"

RUN curl -LO https://github.com/projectdiscovery/httpx/releases/download/v1.3.4/httpx_1.3.4_linux_amd64.zip && unzip -o httpx_1.3.4_linux_amd64.zip -d /usr/local/bin/

RUN curl -LO https://github.com/projectdiscovery/nuclei/releases/download/v2.9.10/nuclei_2.9.10_linux_amd64.zip && unzip -o nuclei_2.9.10_linux_amd64.zip -d /usr/local/bin/

RUN git clone https://github.com/projectdiscovery/nuclei-templates /nuclei-templates

RUN curl -LO https://github.com/projectdiscovery/tlsx/releases/download/v1.1.1/tlsx_1.1.1_linux_amd64.zip && unzip -o tlsx_1.1.1_linux_amd64.zip -d /usr/local/bin/

RUN curl -LO https://github.com/projectdiscovery/dnsx/releases/download/v1.1.4/dnsx_1.1.4_linux_amd64.zip && unzip -o dnsx_1.1.4_linux_amd64.zip -d /usr/local/bin/

RUN curl -LO https://github.com/Edu4rdSHL/rusolver/releases/download/0.9.1/rusolver-linux -o /usr/local/bin/rusolver && chmod +x /usr/local/bin/rusolver

RUN curl -LO https://github.com/optiv/Go365/releases/download/v2.0/Go365_2.0_Linux_x86_64.tar.gz && tar xvf Go365_2.0_Linux_x86_64.tar.gz --directory /usr/local/bin/

RUN curl -LO https://github.com/ffuf/ffuf/releases/download/v1.5.0/ffuf_1.5.0_linux_amd64.tar.gz && tar xvf ffuf_1.5.0_linux_amd64.tar.gz --directory /usr/local/bin/ && chmod +x /usr/local/bin/ffuf

RUN curl -LO https://github.com/ffuf/ffuf/releases/download/v2.0.0/ffuf_2.0.0_linux_amd64.tar.gz && tar xvf ffuf_2.0.0_linux_amd64.tar.gz && cp ffuf /usr/local/bin/ffuf2

RUN git clone https://github.com/0xjbb/static-nmap.git /static-nmap && chmod +x /static-nmap/nmap

RUN git clone https://github.com/robertdavidgraham/masscan /masscan && cd /masscan && make 

RUN curl -LO https://github.com/hahwul/dalfox/releases/download/v2.9.0/dalfox_2.9.0_linux_amd64.tar.gz && tar xvf dalfox_2.9.0_linux_amd64.tar.gz --directory /usr/local/bin/

RUN curl -LO https://github.com/d3mondev/puredns/releases/download/v2.1.1/puredns-Linux-amd64.tgz && tar xvf puredns-Linux-amd64.tgz --directory /usr/local/bin/

RUN  curl -o /function/resolvers.txt -LO https://raw.githubusercontent.com/janmasarik/resolvers/master/resolvers.txt

COPY ./bin/massdns /usr/local/bin/massdns

COPY ./bin/fff /usr/local/bin/fff

ENTRYPOINT [ "/usr/local/bin/python", "-m", "awslambdaric" ]
CMD [ "handler.entry_point.lambda_handler" ]
